@model StarLink_Blog.Models.BlogPost
@using StarLink_Blog.Services.Interfaces
@using StarLink_Blog.Enums


@inject IImageService ImageService
@inject IBlogPostService BlogService


@{
	ViewData["Title"] = "Create";
	var tags = (await BlogService.GetTagsAsync()).OrderBy(t => t.BlogPosts.Count);
}



@*<div class="post-single-wrapper axil-section-gap bg-color-white">
	<div class="container">
		<div class="row">
			<div class="row">
				<div class="col-md-4">
					<h1>Create</h1>

					<h4>BlogPost</h4>
					<hr />

					<form asp-action="Create" asp-controller="BlogPosts" method="post" enctype="multipart/form-data">
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>
						<div class="form-group">
							<label asp-for="Title" class="control-label"></label>
							<input asp-for="Title" class="form-control" />
							<span asp-validation-for="Title" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label asp-for="Content" class="control-label"></label>
							<textarea asp-for="Content" class="form-control editor" rows="5"></textarea>
							<span asp-validation-for="Content" class="text-danger"></span>
						</div>

						<div class="form-group">
							<label asp-for="CategoryId" class="control-label"></label>
							<select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
						</div>

						<div class="form-group">
							<label asp-for="Tags" class="control-label"></label>
							<select name="SelectedTags" class="form-control" asp-items="ViewBag.BlogPostTags"></select>

						</div>

						<div class="form-group">
							<label asp-for="Abstract" class="control-label"></label>
							<input asp-for="Abstract" class="form-control" />
							<span asp-validation-for="Abstract" class="text-danger"></span>
						</div>
						

						<div class="form-group from-check">
							<input class="form-check-input" asp-for="IsDeleted" />
							<label class="form-check-label" asp-for="IsDeleted"></label>
							<span asp-validation-for="IsDeleted" class="text-danger"></span>
						</div>
						<div class="form-group from-check">
							<input class="form-check-input" asp-for="IsPublished" />
							<label class="form-check-label" asp-for="IsPublished"></label>
							<span asp-validation-for="IsDeleted" class="text-danger"></span>
						</div>
						<div class="form-group">
							<label asp-for="BlogPostImage" class="control-label"></label>
							<img id="BlogPostImage" class="img-fluid" src="@ImageService.ConvertByteArrayToFile(Model.ImageData!, Model.ImageType!,(int)DefaultImage.BlogPostImage)" />

							<input asp-for="BlogPostImage" type="file" class="form-control" accept=".png,.jpg,.jpeg,.gif"
								   onchange="document.getElementById('blogpostimage').src = window.URL.createObjectURL(this.files[0])" />
						</div>

						<div class="form-group">
							<input type="submit" value="Create" class="btn btn-primary" />
						</div>
					</form>


					<div>
						<a asp-action="Index">Back to List</a>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>
*@
<main class="container mt-5">
<form asp-action="Create" enctype="multipart/form-data">
	<div asp-validation-summary="ModelOnly" class="text-danger"></div>
	<div class="row">
		<div class="col-12 col-lg-4">
			<div class="form-group">
				<label asp-for="Title" class="control-label"></label>
				<input asp-for="Title" class="form-control" />
				<span asp-validation-for="Title" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Abstract" class="control-label"></label>
				<textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
				<span asp-validation-for="Abstract" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="CategoryId" class="control-label">Category</label>
				<select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
			</div>
			<div class="form-group">
				<label asp-for="BlogPostImage" class="control-label">Blog Post Image</label>
				<img class="img-fluid border rounded-3 m-2" style="max-height: 250px;" src="~/img/DefaultBlogImage.png" id="blogImage">
				<input asp-for="BlogPostImage" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
					   onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
			</div>
		</div>
		<div class="col-12 col-lg-8">
			<div class="form-group">
				<label asp-for="Content" class="control-label"></label>
				<textarea asp-for="Content" id="editor" class="form-control"></textarea>
				<span asp-validation-for="Content" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Tags"></label>
				<input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
				<div class="tagcloud axil-single-widget mt-2">
					@foreach (Tag tag in tags)
					{
						<a onclick="addTag(this)">@tag.Name</a>
					}
				</div>
			</div>
		</div>
	</div>
	<div class="form-group d-flex justify-content-end mt-3">
		<div class="form-group form-check d-flex my-auto">
			<label class="form-check-label my-auto me-4">
				<input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
			</label>
		</div>
		<input type="submit" value="Create" class="btn btn-primary" />
	</div>
</form>
<div class="mt-5">
	<a asp-action="Index">Back to List</a>
</div>
</main>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		ClassicEditor
			.create(document.querySelector('.editor'))
			.catch(error => {
				console.error(error);
			});
	</script>

	<script>
		$(document).ready(function() {
            // override the jQuery ":contains" selector to make it case insensitive
            jQuery.expr[':'].contains = function (a, i, m) {
                return $(a).text().toUpperCase()
                    .indexOf(m[3].toUpperCase()) >= 0;
            };
            // show tagcloud on input focus
            $( '#tagInput' ).focus(function() {
                $( '.tagcloud' ).show(300);
            });
            // hides tagcloud 
            $( 'form *:not("#tagInput")' ).focus(function() {
                if ( $( '.tagcloud' ).is( ':visible' ) ) {
                    $( '.tagcloud' ).hide(300);
                }
            });
            // searches tag cloud
            $('#tagInput').keyup(function() {
                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                })
                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();
            
                $('.tagcloud > a:not( :contains(' + searchString + ') )').hide();
                $('.tagcloud > a:contains(' + searchString + ')').show();
                // hide the tags we already have
                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;
                    let containingTag = $('.tagcloud > a:contains(' + tag.trim() + ')')
                    if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase()) containingTag.addClass('disabledTag');
                });
            });
        });
        function addTag(el) {
            let input = document.getElementById('tagInput');
            
            // do nothing if we've selected the tag already
            if (el.classList.contains('disabledTag')) {
                input.focus();
                return;
            }
            // get the name of the tag
            let tagName = el.textContent + ', ';
            // get array of currently entered tags
            let currentTags = input.value.split(',');
            
            // remove partially typed tag
            currentTags.pop();
            // add the full name of the new tag
            currentTags.push(tagName);
            input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());
            input.focus();
            // reset the tag cloud
            $('.tagcloud > a').show();
            el.classList.add('disabledTag');
        }
	</script>
    }
